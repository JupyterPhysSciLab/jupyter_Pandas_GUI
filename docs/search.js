window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "pandas_GUI", "modulename": "pandas_GUI", "type": "module", "doc": "<p></p>\n"}, {"fullname": "pandas_GUI.name", "modulename": "pandas_GUI", "qualname": "name", "type": "variable", "doc": "<h2 id=\"pandas_gui-aka-jupyter_pandas_gui\">Pandas_GUI (aka: jupyter_Pandas_GUI)</h2>\n\n<p><a href=\"#introduction\">Introduction</a> | <a href=\"#current-features\">Current Features</a> | \n<a href=\"#wishlist\">Wishlist</a> | <a href=\"#usage\">Usage</a> | <a href=\"#installation\">Installation</a> | \n<a href=\"#change-log\">Change Log</a> | <a href=\"#issues-or-comments\">Issues or comments</a> | \n<a href=\"#this-software-is-distributed-under-the-gnu-v3-license\">License</a> |\n<a href=\"https://pypi.org/project/jupyter-Pandas-GUI/\">PyPi link</a></p>\n\n<p><strong><a href=\"https://jupyterphysscilab.github.io/jupyter_Pandas_GUI/\">Documentation / Website\n</a></strong></p>\n\n<h4 id=\"introduction\">Introduction:</h4>\n\n<p>This package provides GUI tools to help the user construct Pandas and Python \nexpressions \nto create things such as new calculated columns, plots or fits. The tools are \nmeant to run in an interactive Jupyter notebook in \n<a href=\"https://jupyter-notebook.readthedocs.io/en/latest/\">classic Jupyter</a>, \n<a href=\"https://jupyterlab.readthedocs.io/en/stable/\">Jupyter Lab</a> \nand <a href=\"https://colab.research.google.com/\">Google Colab</a>. All tools are based on ipywidgets widgets.</p>\n\n<p>These tools are meant to help the user learn how to construct the commands. \nThey are intended for new or occasional users of Pandas. However, \nsophisticated users may find them useful for doing simple one-off tasks where \nthe ability to choose python objects from menus can reduce errors.</p>\n\n<h4 id=\"current-features\">Current Features:</h4>\n\n<p>The user can pass the GUI tools a list of Pandas \nDataFrames to work with. If nothing is passed, the GUI will look for \nPandas DataFrames in the interactive session. In classic Jupyter the whole GUI \nand the Jupyter cell that created it are deleted when done. This leaves \nonly the code that was generated by the GUI and the results of running the\ngenerated code. In Colab and Lab the code is generated in an editable text \nbox. In Colab it can be run by clicking a button. In Lab it is best to copy \nthe code into a new cell before running it.</p>\n\n<p>The generated code contains comments meant to help new users \nunderstand the code.</p>\n\n<p><em>Currently defined GUIs:</em></p>\n\n<ul>\n<li><p><code>new_pandas_column_GUI()</code>: A GUI with four steps to lead the user through \nformulating an expression for a new column.</p>\n\n<p><img src = \"https://jupyterphysscilab.github.io/jupyter_Pandas_GUI/DataSets/new_col_GUI.png\" style=\"width:90%;\"/></p></li>\n<li><p><code>plot_pandas_GUI()</code>: A GUI with four steps to lead the user through plotting \nPandas data as a scatter or line plot using plotly.</p>\n\n<p><img src = \"https://jupyterphysscilab.github.io/jupyter_Pandas_GUI/DataSets/plot_GUI.png\" style=\"width:90%;\"/></p></li>\n<li><p><code>fit_pandas_GUI()</code>: A GUI with six steps to lead the user through fitting \nPandas data to a line, polynomial, exponential, Gaussian or sine function.\n<strong>Selecting regions of the data set to fit does NOT currently\nwork in Colab</strong>.</p>\n\n<p><img src = \"https://jupyterphysscilab.github.io/jupyter_Pandas_GUI/DataSets/GUI_fitexp_1.png\" style=\"width:90%;\"/></p></li>\n</ul>\n\n<h4 id=\"wishlist\">Wishlist:</h4>\n\n<ul>\n<li>GUIs for plots beyond scatter/line plots.</li>\n</ul>\n\n<h4 id=\"usage\">Usage:</h4>\n\n<p>If the <code>jupyter_Pandas_GUI</code> is installed in your Jupyter/Python environment \nstart by importing it:</p>\n\n<pre><code>from pandas_GUI import *\n</code></pre>\n\n<p>When you want to use a particular GUI issue the appropriate command. Currently:</p>\n\n<pre><code>new_pandas_column_GUI()\n</code></pre>\n\n<p>or</p>\n\n<pre><code>plot_pandas_GUI()\n</code></pre>\n\n<p>or</p>\n\n<pre><code>fit_pandas_GUI()\n</code></pre>\n\n<p>See the <a href=\"https://jupyterphysscilab.github.io/jupyter_Pandas_GUI/\">documentation\n</a> for examples,\nmore details and information about passing dataframes that are not at the\nroot of the interactive namespace or presenting the user with alternative names\nfor the dataframes. There is also an option to make columns containing text \navailable. By default they are ignored.</p>\n\n<h4 id=\"installation\">Installation:</h4>\n\n<p>Installation using pip into a virtual environment is recommended.</p>\n\n<p><em>Production</em></p>\n\n<ol>\n<li>If not installed, install pipenv:<code>$ pip3 install --user pipenv</code>. You may\nneed to add <code>~/.local/bin</code> to your <code>PATH</code> to make <code>pipenv</code>\navailable in your command shell. More discussion: \n<a href=\"https://docs.python-guide.org/dev/virtualenvs/\">The Hitchhiker's Guide to Python</a>.</li>\n<li>Navigate to the directory where this package will be installed.</li>\n<li>Start a shell in the environment <code>$ pipenv shell</code>.</li>\n<li><p>Install using pip.</p>\n\n<ol>\n<li><code>pip install jupyter-Pandas-GUI</code>. This will install \nJupyter into the same virtual\nenvironment if you do not already have it on your machine. If Jupyter is already\ninstalled the virtual environment will use the existing installation. This takes\na long time on a Raspberry Pi. It will not run on a 3B+ without at least 1 GB of\nswap. See: <a href=\"https://www.uwosh.edu/facstaff/gutow/computer-and-programming-how-tos/installing-jupyter-on-raspberrian\">Build Jupyter on a Pi\n</a>.</li>\n<li>Still within the environment shell test this by starting jupyter\n<code>jupyter notebook</code> or <code>Jupyter lab</code>. The version of Jupyter requested should \nlaunch in your browser.\n<ol>\n<li>Open a new notebook using the default (Python 3) kernel.</li>\n<li>In the first cell import the pandas_GUI module:\n<code>from pandas_GUI import *</code></li>\n<li>To try:\n<ol>\n<li>Create some Pandas DataFrames in the notebook.</li>\n<li>Use the command <code>new_pandas_column_GUI()</code> to start the GUI.</li>\n<li>It will search for the DataFrames you created.</li>\n<li>Follow the steps to create a new column in one of your\nDataFrames.</li>\n</ol></li>\n</ol></li>\n</ol></li>\n<li><p>_Optional_ You can make this environment available to an alternate Jupyter install as a special kernel when you are the user.</p>\n\n<ol>\n<li>Make sure you are running in your virtual environment <code>$ pipenv shell</code> in the directory for  virtual\nenvironment will do that.</li>\n<li>Issue the command to add this as a kernel to your personal space: \n<code>$ python -m ipykernel install --user --name=&lt;name-you-want-for-kernel&gt;</code>.</li>\n<li>More information is available in the Jupyter/Ipython documentation. A simple tutorial from Nikolai Jankiev\n(_Parametric Thoughts_) can be found <a href=\"https://janakiev.com/til/jupyter-virtual-envs/\">here</a>. </li>\n</ol></li>\n</ol>\n\n<p><em>Development</em></p>\n\n<p>Simply replace <code>$ pip install jupyter-Pandas-GUI</code> with <code>$ pip \ninstall -e ../jupyter_Pandas_GUI</code> in the _Production_\ninstructions.</p>\n\n<h4 id=\"change-log\">Change Log</h4>\n\n<ul>\n<li>0.7.0\n<ul>\n<li>GUIs now also work in Jupyter Lab and Google Colab, although less \nelegently than in classic Jupyter. Only the fit range selection tab \ndoes not yet work in Google Colab.</li>\n<li>Some minor bug fixes and clarification of instructions.</li>\n<li>More and better comments in generated code.</li>\n<li>Replacement of notebook cell javascript tools with those from JPSLUtils \nis complete.</li>\n</ul></li>\n<li>0.6.2.1 Fix for python move of <code>Iterable</code> to <code>collections.abc</code></li>\n<li>0.6.2\n<ul>\n<li>Can now pass dataframes to the GUIs and they will search for additional \ndataframes in the user namespace. Search can be turned off.</li>\n<li>Fixed edge case where GUI fit range picking did nothing.</li>\n</ul></li>\n<li>0.6.1 fixed <code>fit_pandas_GUI()</code> mishandling of user friendly names for the \ndata frames.</li>\n<li>0.6.0\n<ul>\n<li>Documentation (Examples and API).</li>\n<li>Addition of fitting GUI.</li>\n<li>Minor bug and typo fixes.</li>\n<li>Images show up on Pypi page.</li>\n</ul></li>\n<li>0.5.2 \n<ul>\n<li>Widget states autosaved when a new plot is made.</li>\n<li>Began making use of <a href=\"https://github.com/JupyterPhysSciLab/JPSLUtils\">JPSLUtils</a>.  </li>\n</ul></li>\n<li>0.5.1\n<ul>\n<li>Possible to use pandas dataframes in namespaces other than the\nuser global namespace.</li>\n<li>Readme updates.</li>\n</ul></li>\n<li>0.5.0 Initial beta release.</li>\n</ul>\n\n<h4 id=\"issues-or-comments\">Issues or comments</h4>\n\n<p><a href=\"https://github.com/JupyterPhysSciLab/jupyter_Pandas_GUI/issues\">JupyterPhysSciLab/jupyter_Pandas_GUI/issues</a></p>\n\n<h5 id=\"this-software-is-distributed-under-the-gnu-v3-licensehttpsgnuorglicenses\"><a href=\"https://gnu.org/licenses\">This software is distributed under the GNU V3 license</a></h5>\n\n<p>This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.</p>\n\n<p>Copyright - Jonathan Gutow, 2021, 2022.</p>\n", "default_value": " = 'pandas_GUI'"}, {"fullname": "pandas_GUI.fit_Pandas_GUI", "modulename": "pandas_GUI.fit_Pandas_GUI", "type": "module", "doc": "<p></p>\n"}, {"fullname": "pandas_GUI.fit_Pandas_GUI.calcresid", "modulename": "pandas_GUI.fit_Pandas_GUI", "qualname": "calcresid", "type": "function", "doc": "<p>lmfit has empty values for residuals where the weighting is infinite or not defined.\nThis calculates all the residuals based on the actual data and fit results.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>ModelResult result</strong>:  An lmfit ModelResult.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The residuals.</p>\n</blockquote>\n", "signature": "(result)", "funcdef": "def"}, {"fullname": "pandas_GUI.fit_Pandas_GUI.fit_pandas_GUI", "modulename": "pandas_GUI.fit_Pandas_GUI", "qualname": "fit_pandas_GUI", "type": "function", "doc": "<p>If passed no parameters this will look for all the dataframes in the user\nnamespace and make them available for plotting. Once a\ndataframe is chosen only the numerical columns from that dataframe will\nbe available for inclusion in the plotting expression.</p>\n\n<p>This GUI produces code to use the lmfit package to fit data and the plotly\ninteractive plotting package to display the results.</p>\n\n<p>If you wish to allow only certain dataframes or have them show up as\nuser friendly names in the menus provide that information in the first\nparamater df_info.</p>\n\n<p>To allow inclusion of text columns pass True for show_text_col.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><p><strong>bool show_text_col</strong>:  (default = False). When True columns\ncontaining text will be shown.</p></li>\n<li><p><strong>list df_info</strong>:  List of Lists [[object,globalname,\nuserfriendly]],..]</p>\n\n<ul>\n<li>object -- pandas.DataFrame</li>\n<li>globalname -- string name of the object in the user global name space.</li>\n<li>userfriendly -- string name to display for user selection.</li>\n</ul></li>\n</ul>\n\n<p>:keyword string figname: string used to override default python name for\nfigure.</p>\n\n<p>:keyword string fitname: string used to override default python name for\nfit.</p>\n\n<p>:keyword bool findframes: default = True. If set to false and dataframes\nare passed in dfs_info, will not search for dataframes in the user\nnamespace.</p>\n", "signature": "(df_info=None, show_text_col=False, **kwargs)", "funcdef": "def"}, {"fullname": "pandas_GUI.new_pandas_column_GUI", "modulename": "pandas_GUI.new_pandas_column_GUI", "type": "module", "doc": "<p></p>\n"}, {"fullname": "pandas_GUI.new_pandas_column_GUI.new_pandas_column_GUI", "modulename": "pandas_GUI.new_pandas_column_GUI", "qualname": "new_pandas_column_GUI", "type": "function", "doc": "<p>If passed no parameters this will look for all the dataframes in the user\nnamespace and make them available for adding a new column to. Once a\ndataframe is chosen only the numerical columns from that dataframe will\nbe available for inclusion in the new column expression.</p>\n\n<p>If you wish to allow only certain dataframes or have them show up as\nuser friendly names in the menus provide that information in the first\nparamater df_info.</p>\n\n<p>To allow inclusion of text columns pass True for show_text_col.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><p><strong>bool show_text_col</strong>:  (default = False). When True columns\ncontaining text will be shown.</p></li>\n<li><p><strong>list df_info</strong>:  List of Lists [[object,globalname,\nuserfriendly]],..]</p>\n\n<ul>\n<li>object -- pandas.DataFrame</li>\n<li>globalname -- string name of the object in the user global name space.</li>\n<li>userfriendly -- string name to display for user selection.</li>\n</ul></li>\n</ul>\n\n<p>:keyword bool findframes: default = True. If set to false and dataframes\nare passed in dfs_info, will not search for dataframes in the user\nnamespace.</p>\n", "signature": "(df_info=None, show_text_col=False, **kwargs)", "funcdef": "def"}, {"fullname": "pandas_GUI.plot_Pandas_GUI", "modulename": "pandas_GUI.plot_Pandas_GUI", "type": "module", "doc": "<p></p>\n"}, {"fullname": "pandas_GUI.plot_Pandas_GUI.plot_pandas_GUI", "modulename": "pandas_GUI.plot_Pandas_GUI", "qualname": "plot_pandas_GUI", "type": "function", "doc": "<p>If passed no parameters this will look for all the dataframes in the user\nnamespace and make them available for plotting. Once a\ndataframe is chosen only the numerical columns from that dataframe will\nbe available for inclusion in the plotting expression.</p>\n\n<p>This GUI produces code to use the plotly interactive plotting package.</p>\n\n<p>If you wish to allow only certain dataframes or have them show up as\nuser friendly names in the menus provide that information in the first\nparamater df_info.</p>\n\n<p>To allow inclusion of text columns pass True for show_text_col.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><p><strong>bool show_text_col</strong>:  (default = False). When True columns\ncontaining text will be shown.</p></li>\n<li><p><strong>list df_info</strong>:  List of Lists [[object,globalname,userfriendly]],..]</p>\n\n<ul>\n<li>object -- pandas.DataFrame</li>\n<li>globalname -- string name of the object in the user global name space.</li>\n<li>userfriendly -- string name to display for user selection.</li>\n</ul></li>\n</ul>\n\n<p>:keyword string figname: string used to override default python name for\nfigure.</p>\n\n<p>:keyword bool findframes: default = True. If set to false and dataframes\nare passed in dfs_info, will not search for dataframes in the user\nnamespace.</p>\n", "signature": "(df_info=None, show_text_col=False, **kwargs)", "funcdef": "def"}, {"fullname": "pandas_GUI.utils", "modulename": "pandas_GUI.utils", "type": "module", "doc": "<p>pandas_GUI.utils\nThe Jupyter JS call utils below are being deprecated by utilites in the\npackage JPSLUtils (https://github.com/JupyterPhysSciLab/JPSLUtils).</p>\n"}, {"fullname": "pandas_GUI.utils.new_cell_immediately_below", "modulename": "pandas_GUI.utils", "qualname": "new_cell_immediately_below", "type": "function", "doc": "<p></p>\n", "signature": "()", "funcdef": "def"}, {"fullname": "pandas_GUI.utils.select_cell_immediately_below", "modulename": "pandas_GUI.utils", "qualname": "select_cell_immediately_below", "type": "function", "doc": "<p></p>\n", "signature": "()", "funcdef": "def"}, {"fullname": "pandas_GUI.utils.move_cursor_in_current_cell", "modulename": "pandas_GUI.utils", "qualname": "move_cursor_in_current_cell", "type": "function", "doc": "<p></p>\n", "signature": "(delta)", "funcdef": "def"}, {"fullname": "pandas_GUI.utils.insert_text_into_next_cell", "modulename": "pandas_GUI.utils", "qualname": "insert_text_into_next_cell", "type": "function", "doc": "<p></p>\n", "signature": "(text)", "funcdef": "def"}, {"fullname": "pandas_GUI.utils.replace_text_of_current_cell", "modulename": "pandas_GUI.utils", "qualname": "replace_text_of_current_cell", "type": "function", "doc": "<p></p>\n", "signature": "(text)", "funcdef": "def"}, {"fullname": "pandas_GUI.utils.insert_text_at_beginning_of_current_cell", "modulename": "pandas_GUI.utils", "qualname": "insert_text_at_beginning_of_current_cell", "type": "function", "doc": "<p></p>\n", "signature": "(text)", "funcdef": "def"}, {"fullname": "pandas_GUI.utils.insert_newline_at_end_of_current_cell", "modulename": "pandas_GUI.utils", "qualname": "insert_newline_at_end_of_current_cell", "type": "function", "doc": "<p></p>\n", "signature": "(text)", "funcdef": "def"}, {"fullname": "pandas_GUI.utils.select_containing_cell", "modulename": "pandas_GUI.utils", "qualname": "select_containing_cell", "type": "function", "doc": "<p></p>\n", "signature": "(elemID)", "funcdef": "def"}, {"fullname": "pandas_GUI.utils.delete_selected_cell", "modulename": "pandas_GUI.utils", "qualname": "delete_selected_cell", "type": "function", "doc": "<p></p>\n", "signature": "()", "funcdef": "def"}, {"fullname": "pandas_GUI.utils.find_pandas_dataframe_names", "modulename": "pandas_GUI.utils", "qualname": "find_pandas_dataframe_names", "type": "function", "doc": "<p>This operation will search the interactive name space for pandas\nDataFrame objects. It will not find DataFrames that are children\nof objects in the interactive namespace. You will need to provide\nyour own operation for finding those.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>string names for objects in the global interactive\n  namespace that are pandas DataFrames.</p>\n</blockquote>\n", "signature": "()", "funcdef": "def"}, {"fullname": "pandas_GUI.utils.find_figure_names", "modulename": "pandas_GUI.utils", "qualname": "find_figure_names", "type": "function", "doc": "<p>This operation will search the interactive namespace for objects that are\nplotly Figures (plotly.graph_objects.Figure) or plotly FigureWidgets\n(plotly.graph_objects.FigureWidget). It will not find Figures or\nFigureWidgets that are children of other objects. You will need to\nprovide your own operation for finding those.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>of string names for the objects in the global\n  interactive namespace that are plotly Figures or FigureWidgets.</p>\n</blockquote>\n", "signature": "()", "funcdef": "def"}, {"fullname": "pandas_GUI.utils.find_fit_names", "modulename": "pandas_GUI.utils", "qualname": "find_fit_names", "type": "function", "doc": "<p>This operation will search the interactive namespace for objects that are\nlmfit results (lmfit.model.ModelResults). It will not find fit results\nthat are children of other objects. You will need to\nprovide your own operation for finding those.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>of string names for the objects in the global\n  interactive namespace that are lmfit fit results.</p>\n</blockquote>\n", "signature": "()", "funcdef": "def"}, {"fullname": "pandas_GUI.utils.iconselector", "modulename": "pandas_GUI.utils", "qualname": "iconselector", "type": "class", "doc": "<p>This class provides a self updating set of small buttons showing the\nfont-awesome icons passed to it. The user selected icon is highlighted\nin darkgray. The <code>selected</code> attribute (value is a synonym) is set to the\nname of the current selection. The <code>box</code> attribute is an ipywidget HBox\nthat can be displayed or incorporated into more complex ipywidget\nconstructs to interact with the user.</p>\n"}, {"fullname": "pandas_GUI.utils.iconselector.__init__", "modulename": "pandas_GUI.utils", "qualname": "iconselector.__init__", "type": "function", "doc": "<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><p><strong>list iconlist</strong>:  list of string names for the font awsome icons to\ndisplay. The names should not be prefixed with 'fa-'.</p></li>\n<li><p><strong>string selected</strong>:  name of selected icon (default = None).</p></li>\n</ul>\n", "signature": "(self, iconlist, selected=None)", "funcdef": "def"}, {"fullname": "pandas_GUI.utils.iconselector.value", "modulename": "pandas_GUI.utils", "qualname": "iconselector.value", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "pandas_GUI.utils.notice_group", "modulename": "pandas_GUI.utils", "qualname": "notice_group", "type": "class", "doc": "<p>A notice group contains a list of strings that are referred to by their\nindex. The group keeps track of which notices are 'active'. A call to the\n<code>.notice_html()</code> method returns an unordered html formatted list of the\nnotice texts. This can be used to display or update notice text\nfor the user.</p>\n\n<p>Optional notice group color, header and footers can be provided.</p>\n"}, {"fullname": "pandas_GUI.utils.notice_group.__init__", "modulename": "pandas_GUI.utils", "qualname": "notice_group.__init__", "type": "function", "doc": "<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><p><strong>list noticelist</strong>:  list of strings of the text for each notice</p></li>\n<li><p><strong>string header</strong>:  string providing a header for this notice group</p></li>\n<li><p><strong>string footer</strong>:  string providing a footer for this notice group</p></li>\n<li><p><strong>string color</strong>:  string compatible with css color attribute,\nused to color the displayed notices. The color not impact headers\nand footers.</p></li>\n</ul>\n", "signature": "(self, noticelist, header='', footer='', color='')", "funcdef": "def"}, {"fullname": "pandas_GUI.utils.notice_group.get_active", "modulename": "pandas_GUI.utils", "qualname": "notice_group.get_active", "type": "function", "doc": "<p>Returns a list of indexes of active notices</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "pandas_GUI.utils.notice_group.set_active", "modulename": "pandas_GUI.utils", "qualname": "notice_group.set_active", "type": "function", "doc": "<p>Used to set a specific list of notices to active. This will remove\nactive notices that are not in the provided list.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>list whichnotices</strong>: </li>\n</ul>\n", "signature": "(self, whichnotices)", "funcdef": "def"}, {"fullname": "pandas_GUI.utils.notice_group.activate_notice", "modulename": "pandas_GUI.utils", "qualname": "notice_group.activate_notice", "type": "function", "doc": "<p>adds one of the notices to the active list</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>int notice_id</strong>: </li>\n</ul>\n", "signature": "(self, notice_id)", "funcdef": "def"}, {"fullname": "pandas_GUI.utils.notice_group.deactivate_notice", "modulename": "pandas_GUI.utils", "qualname": "notice_group.deactivate_notice", "type": "function", "doc": "<p>removes a notice from the active list</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>int notice_id</strong>: </li>\n</ul>\n", "signature": "(self, notice_id)", "funcdef": "def"}, {"fullname": "pandas_GUI.utils.notice_group.notice_html", "modulename": "pandas_GUI.utils", "qualname": "notice_group.notice_html", "type": "function", "doc": "<p>Provides an html formatted string displaying the active notices.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>string of html.</p>\n</blockquote>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "pandas_GUI.utils.build_run_snip_widget", "modulename": "pandas_GUI.utils", "qualname": "build_run_snip_widget", "type": "class", "doc": "<p>Displays multiple widgets in rows and columns using the grid box model.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>{box_params}</p>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">ipywidgets</span> <span class=\"k\">as</span> <span class=\"nn\">widgets</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">title_widget</span> <span class=\"o\">=</span> <span class=\"n\">widgets</span><span class=\"o\">.</span><span class=\"n\">HTML</span><span class=\"p\">(</span><span class=\"s1\">&#39;&lt;em&gt;Grid Box Example&lt;/em&gt;&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">slider</span> <span class=\"o\">=</span> <span class=\"n\">widgets</span><span class=\"o\">.</span><span class=\"n\">IntSlider</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">button1</span> <span class=\"o\">=</span> <span class=\"n\">widgets</span><span class=\"o\">.</span><span class=\"n\">Button</span><span class=\"p\">(</span><span class=\"n\">description</span><span class=\"o\">=</span><span class=\"s1\">&#39;1&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">button2</span> <span class=\"o\">=</span> <span class=\"n\">widgets</span><span class=\"o\">.</span><span class=\"n\">Button</span><span class=\"p\">(</span><span class=\"n\">description</span><span class=\"o\">=</span><span class=\"s1\">&#39;2&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># Create a grid with two columns, splitting space equally</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">layout</span> <span class=\"o\">=</span> <span class=\"n\">widgets</span><span class=\"o\">.</span><span class=\"n\">Layout</span><span class=\"p\">(</span><span class=\"n\">grid_template_columns</span><span class=\"o\">=</span><span class=\"s1\">&#39;1fr 1fr&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">widgets</span><span class=\"o\">.</span><span class=\"n\">GridBox</span><span class=\"p\">([</span><span class=\"n\">title_widget</span><span class=\"p\">,</span> <span class=\"n\">slider</span><span class=\"p\">,</span> <span class=\"n\">button1</span><span class=\"p\">,</span> <span class=\"n\">button2</span><span class=\"p\">],</span> <span class=\"n\">layout</span><span class=\"o\">=</span><span class=\"n\">layout</span><span class=\"p\">)</span>\n</code></pre></div>\n", "bases": "ipywidgets.widgets.widget_box.GridBox"}, {"fullname": "pandas_GUI.utils.build_run_snip_widget.__init__", "modulename": "pandas_GUI.utils", "qualname": "build_run_snip_widget.__init__", "type": "function", "doc": "<p>Public constructor</p>\n", "signature": "(self, defaulttxt)", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();